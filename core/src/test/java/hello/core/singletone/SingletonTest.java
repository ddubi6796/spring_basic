package hello.core.singletone;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import hello.core.AppConfig;
import hello.core.member.MemberService;

public class SingletonTest {

	@Test
	@DisplayName("스프링 없는 순수한 DI 컨테이너")
	void pureContainer() {
		AppConfig appConfig = new AppConfig();
		//1. 조회: 호출할 때 마다 객체를 생성
		MemberService memberService1 = appConfig.memberService();
		
		//2. 조회: 호출할 때 마다 객체를 생성
		MemberService memberService2 = appConfig.memberService();
		
		//참조값이 다른 것을 확인
		System.out.println("memberService1 = "+ memberService1);
		System.out.println("memberService2 = "+ memberService2);
		
		//memberService1 != memberService2 (호출할 때 마다 객체를 생성하기 때문)
		Assertions.assertThat(memberService1).isNotSameAs(memberService2);
	}
	

	@Test
	@DisplayName("싱글톤 패턴을 적용한 객체 사용")
	void singletonServiceTest() {
		SingletonService singletonService1 = SingletonService.getInstance();
		SingletonService singletonService2 = SingletonService.getInstance();
		
		//참조값이 같은 것을 확인
		System.out.println("singletonService1 = "+ singletonService1);
		System.out.println("singletonService2 = "+ singletonService2);
		
		Assertions.assertThat(singletonService1).isSameAs(singletonService2);
	}
	
	@Test
	@DisplayName("싱글톤 컨테이너와 싱글톤")
	void springContainer() {
//		AppConfig appConfig = new AppConfig();
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		
		MemberService memberService1 = ac.getBean("memberService", MemberService.class);
		MemberService memberService2 = ac.getBean("memberService", MemberService.class);

		//참조값이 같은 것을 확인
		System.out.println("memberService1 = "+ memberService1);
		System.out.println("memberService2 = "+ memberService2);

		//스프링컨테이너는 빈을 싱글톤 패턴으로 관리(이미 만들어진 객체를 공유하여 재사용)
		Assertions.assertThat(memberService1).isSameAs(memberService2);
	}
}
